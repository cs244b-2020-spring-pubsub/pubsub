// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.21.0
// 	protoc        v3.11.4
// source: proto/master_slave.proto

package proto

import (
	context "context"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

// The request message for slave subscribe
type SlaveSubscribeRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *SlaveSubscribeRequest) Reset() {
	*x = SlaveSubscribeRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_master_slave_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SlaveSubscribeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SlaveSubscribeRequest) ProtoMessage() {}

func (x *SlaveSubscribeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_master_slave_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SlaveSubscribeRequest.ProtoReflect.Descriptor instead.
func (*SlaveSubscribeRequest) Descriptor() ([]byte, []int) {
	return file_proto_master_slave_proto_rawDescGZIP(), []int{0}
}

// The response message for slave subscribe
type SlaveSubscribeResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Topic
	Topic *Topic `protobuf:"bytes,1,opt,name=topic,proto3" json:"topic,omitempty"`
	// Message
	Msg *Message `protobuf:"bytes,2,opt,name=msg,proto3" json:"msg,omitempty"`
}

func (x *SlaveSubscribeResponse) Reset() {
	*x = SlaveSubscribeResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_master_slave_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SlaveSubscribeResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SlaveSubscribeResponse) ProtoMessage() {}

func (x *SlaveSubscribeResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_master_slave_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SlaveSubscribeResponse.ProtoReflect.Descriptor instead.
func (*SlaveSubscribeResponse) Descriptor() ([]byte, []int) {
	return file_proto_master_slave_proto_rawDescGZIP(), []int{1}
}

func (x *SlaveSubscribeResponse) GetTopic() *Topic {
	if x != nil {
		return x.Topic
	}
	return nil
}

func (x *SlaveSubscribeResponse) GetMsg() *Message {
	if x != nil {
		return x.Msg
	}
	return nil
}

var File_proto_master_slave_proto protoreflect.FileDescriptor

var file_proto_master_slave_proto_rawDesc = []byte{
	0x0a, 0x18, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x5f, 0x73,
	0x6c, 0x61, 0x76, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x06, 0x70, 0x75, 0x62, 0x73,
	0x75, 0x62, 0x1a, 0x12, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x70, 0x75, 0x62, 0x73, 0x75, 0x62,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x17, 0x0a, 0x15, 0x53, 0x6c, 0x61, 0x76, 0x65, 0x53,
	0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22,
	0x60, 0x0a, 0x16, 0x53, 0x6c, 0x61, 0x76, 0x65, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62,
	0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x23, 0x0a, 0x05, 0x74, 0x6f, 0x70,
	0x69, 0x63, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x70, 0x75, 0x62, 0x73, 0x75,
	0x62, 0x2e, 0x54, 0x6f, 0x70, 0x69, 0x63, 0x52, 0x05, 0x74, 0x6f, 0x70, 0x69, 0x63, 0x12, 0x21,
	0x0a, 0x03, 0x6d, 0x73, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x70, 0x75,
	0x62, 0x73, 0x75, 0x62, 0x2e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x03, 0x6d, 0x73,
	0x67, 0x32, 0x69, 0x0a, 0x0d, 0x4d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x53, 0x69, 0x64, 0x65, 0x63,
	0x61, 0x72, 0x12, 0x58, 0x0a, 0x13, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x46,
	0x72, 0x6f, 0x6d, 0x4d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x12, 0x1d, 0x2e, 0x70, 0x75, 0x62, 0x73,
	0x75, 0x62, 0x2e, 0x53, 0x6c, 0x61, 0x76, 0x65, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62,
	0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1e, 0x2e, 0x70, 0x75, 0x62, 0x73, 0x75,
	0x62, 0x2e, 0x53, 0x6c, 0x61, 0x76, 0x65, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x30, 0x01, 0x42, 0x0d, 0x5a, 0x0b,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x3b, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x06, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x33,
}

var (
	file_proto_master_slave_proto_rawDescOnce sync.Once
	file_proto_master_slave_proto_rawDescData = file_proto_master_slave_proto_rawDesc
)

func file_proto_master_slave_proto_rawDescGZIP() []byte {
	file_proto_master_slave_proto_rawDescOnce.Do(func() {
		file_proto_master_slave_proto_rawDescData = protoimpl.X.CompressGZIP(file_proto_master_slave_proto_rawDescData)
	})
	return file_proto_master_slave_proto_rawDescData
}

var file_proto_master_slave_proto_msgTypes = make([]protoimpl.MessageInfo, 2)
var file_proto_master_slave_proto_goTypes = []interface{}{
	(*SlaveSubscribeRequest)(nil),  // 0: pubsub.SlaveSubscribeRequest
	(*SlaveSubscribeResponse)(nil), // 1: pubsub.SlaveSubscribeResponse
	(*Topic)(nil),                  // 2: pubsub.Topic
	(*Message)(nil),                // 3: pubsub.Message
}
var file_proto_master_slave_proto_depIdxs = []int32{
	2, // 0: pubsub.SlaveSubscribeResponse.topic:type_name -> pubsub.Topic
	3, // 1: pubsub.SlaveSubscribeResponse.msg:type_name -> pubsub.Message
	0, // 2: pubsub.MasterSidecar.SubscribeFromMaster:input_type -> pubsub.SlaveSubscribeRequest
	1, // 3: pubsub.MasterSidecar.SubscribeFromMaster:output_type -> pubsub.SlaveSubscribeResponse
	3, // [3:4] is the sub-list for method output_type
	2, // [2:3] is the sub-list for method input_type
	2, // [2:2] is the sub-list for extension type_name
	2, // [2:2] is the sub-list for extension extendee
	0, // [0:2] is the sub-list for field type_name
}

func init() { file_proto_master_slave_proto_init() }
func file_proto_master_slave_proto_init() {
	if File_proto_master_slave_proto != nil {
		return
	}
	file_proto_pubsub_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_proto_master_slave_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SlaveSubscribeRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_master_slave_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SlaveSubscribeResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_proto_master_slave_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   2,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_proto_master_slave_proto_goTypes,
		DependencyIndexes: file_proto_master_slave_proto_depIdxs,
		MessageInfos:      file_proto_master_slave_proto_msgTypes,
	}.Build()
	File_proto_master_slave_proto = out.File
	file_proto_master_slave_proto_rawDesc = nil
	file_proto_master_slave_proto_goTypes = nil
	file_proto_master_slave_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// MasterSidecarClient is the client API for MasterSidecar service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type MasterSidecarClient interface {
	// Subscribe to a master
	// The slave will send request to master on init. The master will respond with the publish messages it receives.
	SubscribeFromMaster(ctx context.Context, in *SlaveSubscribeRequest, opts ...grpc.CallOption) (MasterSidecar_SubscribeFromMasterClient, error)
}

type masterSidecarClient struct {
	cc grpc.ClientConnInterface
}

func NewMasterSidecarClient(cc grpc.ClientConnInterface) MasterSidecarClient {
	return &masterSidecarClient{cc}
}

func (c *masterSidecarClient) SubscribeFromMaster(ctx context.Context, in *SlaveSubscribeRequest, opts ...grpc.CallOption) (MasterSidecar_SubscribeFromMasterClient, error) {
	stream, err := c.cc.NewStream(ctx, &_MasterSidecar_serviceDesc.Streams[0], "/pubsub.MasterSidecar/SubscribeFromMaster", opts...)
	if err != nil {
		return nil, err
	}
	x := &masterSidecarSubscribeFromMasterClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type MasterSidecar_SubscribeFromMasterClient interface {
	Recv() (*SlaveSubscribeResponse, error)
	grpc.ClientStream
}

type masterSidecarSubscribeFromMasterClient struct {
	grpc.ClientStream
}

func (x *masterSidecarSubscribeFromMasterClient) Recv() (*SlaveSubscribeResponse, error) {
	m := new(SlaveSubscribeResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// MasterSidecarServer is the server API for MasterSidecar service.
type MasterSidecarServer interface {
	// Subscribe to a master
	// The slave will send request to master on init. The master will respond with the publish messages it receives.
	SubscribeFromMaster(*SlaveSubscribeRequest, MasterSidecar_SubscribeFromMasterServer) error
}

// UnimplementedMasterSidecarServer can be embedded to have forward compatible implementations.
type UnimplementedMasterSidecarServer struct {
}

func (*UnimplementedMasterSidecarServer) SubscribeFromMaster(*SlaveSubscribeRequest, MasterSidecar_SubscribeFromMasterServer) error {
	return status.Errorf(codes.Unimplemented, "method SubscribeFromMaster not implemented")
}

func RegisterMasterSidecarServer(s *grpc.Server, srv MasterSidecarServer) {
	s.RegisterService(&_MasterSidecar_serviceDesc, srv)
}

func _MasterSidecar_SubscribeFromMaster_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(SlaveSubscribeRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(MasterSidecarServer).SubscribeFromMaster(m, &masterSidecarSubscribeFromMasterServer{stream})
}

type MasterSidecar_SubscribeFromMasterServer interface {
	Send(*SlaveSubscribeResponse) error
	grpc.ServerStream
}

type masterSidecarSubscribeFromMasterServer struct {
	grpc.ServerStream
}

func (x *masterSidecarSubscribeFromMasterServer) Send(m *SlaveSubscribeResponse) error {
	return x.ServerStream.SendMsg(m)
}

var _MasterSidecar_serviceDesc = grpc.ServiceDesc{
	ServiceName: "pubsub.MasterSidecar",
	HandlerType: (*MasterSidecarServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "SubscribeFromMaster",
			Handler:       _MasterSidecar_SubscribeFromMaster_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "proto/master_slave.proto",
}
