syntax = "proto3";

option go_package = "proto;proto";

package pubsub;

import "proto/pubsub.proto";

// Service definition for raft's sidecar
service RaftSidecar {
  // Invoked by leader to replicate log entries. Also used as heart beat.
  rpc AppendEntries(AppendEntriesRequest) returns (AppendEntriesResponse) {}
  // Invoked by candidates to gather votes
  rpc RequestVote(RequestVoteRequest) returns (RequestVoteResponse)  {}
}

message AppendEntriesRequest {
  // Leader's term
  uint64 term = 1;
  // Leader's id in form of addr:port. So that the follower can redirect the client
  string leader_id = 2;
  // Index of log entry immediately preceding new ones
  uint64 prev_log_index = 3;
  // Term of prevLogIndex
  uint64 prev_log_term = 4;
  // Log entries to store (empty for heartbeat)
  repeated PublishRequest entries = 5;
  // Leader's commit index
  uint64 commit = 6;
}

message AppendEntriesResponse {
  // Current term, for leader to update itself
  uint64 term = 1;
  enum Status {
    SUCCESS = 0;
    FAILURE = 1;
  }
  // Status to indicate whether the RPC is success
  // SUCCESS if the follower contained entry matching prevLogIndex and prevLogTerm
  Status status = 2;
  // Additional information
  string info =  3;
}

message RequestVoteRequest {
  // Candidate's term
  uint64 term = 1;
  // The id of the candidate that is requesting the vote (addr:port)
  uint64 candidate_id = 2;
  // Index of the candidate's last log entry
  uint64 last_log_index = 3;
  // Term of the candidate's last log entry
  uint64 last_log_term = 4;
}

message RequestVoteResponse {
  // Current term, for candidate to update itself
  uint64 term = 1;
  // True if the candidate received the vote
  bool vote_granted = 2;
}

enum Role {
  Leader = 0;
  Follower = 1;
  Candidate = 2;
}